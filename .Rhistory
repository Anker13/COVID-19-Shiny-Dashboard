p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed, fill = Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "right")+
geom_forecast(show.legend = TRUE, showgap = FALSE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed, fill = Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "right")+
geom_forecast(show.legend = TRUE, showgap = FALSE)+
geom_line(show.legend = TRUE)
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "right")+
geom_forecast(show.legend = TRUE, showgap = FALSE)+
geom_line(show.legend = TRUE)
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "right")+
geom_forecast(show.legend = TRUE, showgap = FALSE)+
geom_line(show.legend = TRUE)+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "top")+
geom_forecast(show.legend = TRUE, showgap = FALSE)+
geom_line(show.legend = TRUE)+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 365.25)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 365)
Germany_STL <- stl(Germany_TS, s.window = "period")
plot(Germany_STL)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 7)
Germany_STL <- stl(Germany_TS, s.window = "period")
plot(Germany_STL)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 365.52)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = '365.25')
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 365.25)
Germany_STL <- stl(Germany_TS, s.window = "period")
plot(Germany_STL)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 365)
Germany_STL <- stl(Germany_TS, s.window = "period")
plot(Germany_STL)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 12)
Germany_STL <- stl(Germany_TS, s.window = "period")
plot(Germany_STL)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)])
Germany_STL <- stl(Germany_TS, s.window = "period")
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)])
Germany_STL <- stl(Germany_TS, s.window = "period")
plot(Germany_STL)
plot(Germany_TS)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 365)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 1)
Germany_STL <- stl(Germany_TS, s.window = "period")
?ts()
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- as.ts(Germany)
View(Germany_TS)
?as_ts()
?as.ts()
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- xts(Germany$Confirmed,Germany$Date)
View(Germany_TS)
plot(Germany_TS)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_XTS <- xts(Germany$Confirmed,Germany$Date)
Germany_TS <- ts(Germany_XTS, frequency = 365, start = c(year(start(Germany_XTS)),month(start(Germany_XTS)),day(start(Germany_XTS))), end = c(year(end(Germany_XTS)),month(end(Germany_XTS)),day(end(Germany_XTS))))
View(Germany_XTS)
Germany_TS <- ts(Germany_XTS, frequency = 365, start = c(year(start(Germany_XTS)),month(start(Germany_XTS)),day(start(Germany_XTS))))
view(Germany_TS)
plot(Germany_TS)
plot(forecast(ets(Germany_TS),10))
plot(forecast(ets(Germany_TS),10), xaxt = "n")
plot(forecast(ets(Germany_TS),10), xaxt = "n")
a = seq(Germany$Date[1],by = "days", length= length(Germany$Date))
axis(1, at =decimal_date(a), labels = format(a, "%Y %b %d"))
axis(0, at =decimal_date(a), labels = format(a, "%Y %b %d"))
axis(2, at =decimal_date(a), labels = format(a, "%Y %b %d"))
axis(1, at =decimal_date(a), labels = format(a, "%Y %b %d"))
p<- ggplot(data = Germany_TS, aes(x= Date, y=Confirmed))+
geom_line()
p
Germany_TS
view(Germany_TS)
p<- ggplot(data = Germany_TS)+
geom_line()
p
p<- ggplot(data = Germany_TS, aes(x=x,y=y))+
geom_line()
p
p<- ggplot(data = Germany_TS, aes(x=Series1,y=Series1))+
geom_line()
p
head(Germany_TS)
Germany_XTS$date <- time(Germany_XTS)
library(tidyverse)
library(utils)
library(dplyr)
library(dplyr)
library(stringi)
library(forecast)
library(plotly)
library(ggplot2)
library(TTR)
library(time)
library(lubridate)
library(xts)
Germany_XTS$date <- time(Germany_XTS)
Germany_XTS$date <- time(Germany_XTS[,1])
Germany_FIT <- auto.arima(Germany_XTS[,1])
View(Germany_FIT)
Germany_FORECAST <- forecast(Germany_FIT, h=14)
View(Germany_FORECAST)
plot(Germany_FORECAST)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_XTS <- xts(Germany,Germany$Date)
Germany_FIT <- auto.arima(Germany_XTS$Confirmed)
Germany_FIT <- auto.arima(Germany_XTS$Confirmed)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_XTS <- xts(Germany$Confirmed,Germany$Date)
Germany_FIT <- auto.arima(Germany_XTS[,1])
Germany_FORECAST <- forecast(Germany_FIT, h=14)
plot(Germany_FORECAST)
remove(Germany_XTS)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_XTS$Date <- Germany$Date
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_XTS <- structure(list(date=Germany$Date, Confirmed = Germany$Confirmed))
View(Germany_XTS)
Germany_FIT <- auto.arima(Germany_XTS[,1])
Germany_FIT <- auto.arima(Germany_XTS$Confirmed)
Germany_FORECAST <- forecast(Germany_FIT, h=14)
plot(Germany_FORECAST)
Germany_FIT <- auto.arima(Germany_XTS)
Germany_FIT <- auto.arima(Germany_XTS$Confirmed)
Germany_FORECAST <- forecast(Germany_FIT, h=14)
plot(Germany_FORECAST)
forecast_length <- 14
Germany_FORECAST <- forecast(Germany_FIT, h=forecast_length)
Germany_FORECAST.date <- seq(by=Germany_XTS$date[length(Germany_XTS$date)]-Germany_XTS$date[length(Germany_XTS$date)-1], len = forecast_length)
view(Germany_FORECAST.date)
Germany_FORECAST.date <- seq(as.POSIXct(Germany_XTS$date[Germany_XTS$date]),by=Germany_XTS$date[length(Germany_XTS$date)]-Germany_XTS$date[length(Germany_XTS$date)-1], len = forecast_length)
Germany_FORECAST.date <- seq(as.POSIXct(Germany_XTS$date[length(Germany_XTS$date)]),by=Germany_XTS$date[length(Germany_XTS$date)]-Germany_XTS$date[length(Germany_XTS$date)-1], len = forecast_length)
plot(Germany_FORECAST)
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("black"), name="observed")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("black"), name="observed")%>%
add_lines(x = format(Germany_FORECAST.date, "%Y-%b-%d"), y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p
Germany_FORECAST.date <- format(Germany_FORECAST.date, "%Y-%m-%d")
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("black"), name="observed")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("black"), name="observed")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("blue95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("blue80"), name ="80% confidence")
p
?I()
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("black"), name="observed")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")
p
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("black"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p
p <- plot_ly()%>%
layout(title = 'Forecasting of Confirmed Cases', xaxis='Date', yaxis='Cases')%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
layout(title = 'Forecasting of Confirmed Cases', xaxis='Date', yaxis='Cases')
p
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
# layout(title = 'Forecasting of Confirmed Cases', xaxis='Date', yaxis='Cases')
p
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
layout(title = "Forecasting of Confirmed Cases", xaxis="Date", yaxis="Cases")
p
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p <- p %>% layout(title = 'Forecasting of Confirmed Cases', xaxis='Date', yaxis='Cases')
p
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p <- p %>% layout(xaxis='Date', yaxis='Cases')
p
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p <- p %>% layout(xaxis=list("Date"), yaxis=list("Cases"))
p
p <- plot_ly(data = Germany_XTS)%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p <- plot_ly(data = Germany_XTS)%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p <- plot_ly(data = as.data.frame(Germany_XTS))%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p
Germany_FORECAST.date[,14]
Germany_FORECAST.date[14]
view(Germany_FORECAST$lower[,1])
view(Germany_FORECAST$lower[14,1])
view(Germany_FORECAST$upper[14,1])
view(Germany_FORECAST$upper[14,2])
p <- plot_ly(data = as.data.frame(Germany_XTS), width = c(Germany_XTS$date[1],Germany_FORECAST.date[forecast_length]), height = c(Germany_XTS$Confirmed[1],Germany_FORECAST[forecast_length,2]) )%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="Confirmed Cases")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p <- plot_ly(data = as.data.frame(Germany_XTS))%>%
add_lines(x = ~Germany_XTS$date, y = ~Germany_XTS$Confirmed, color=I("green"), name="Confirmed Cases")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,2], ymax = ~Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,1], ymax = ~Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = ~Germany_FORECAST.date, y = ~Germany_FORECAST$mean, color=I("blue"), name="prediction")
p
p <- plot_ly(data = as.data.frame(Germany_XTS))%>%
add_lines(x = ~Germany_XTS$date, y = ~Germany_XTS$Confirmed, color=I("green"), name="Confirmed Cases")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,2], ymax = ~Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,1], ymax = ~Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = ~Germany_FORECAST.date, y = ~Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
layout(xaxis="Date")
p
p <- plot_ly(data = as.data.frame(Germany_XTS))%>%
add_lines(x = ~Germany_XTS$date, y = ~Germany_XTS$Confirmed, color=I("green"), name="Confirmed Cases")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,2], ymax = ~Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,1], ymax = ~Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = ~Germany_FORECAST.date, y = ~Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
layout(title="Forecast")
p
p <- plot_ly(data = as.data.frame(Germany_XTS))%>%
add_lines(x = ~Germany_XTS$date, y = ~Germany_XTS$Confirmed, color=I("green"), name="Confirmed Cases")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,2], ymax = ~Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,1], ymax = ~Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = ~Germany_FORECAST.date, y = ~Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
layout(title="Forecast",xaxis="Date")
p
p <- plot_ly(data = as.data.frame(Germany_XTS))%>%
add_lines(x = ~Germany_XTS$date, y = ~Germany_XTS$Confirmed, color=I("green"), name="Confirmed Cases")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,2], ymax = ~Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,1], ymax = ~Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = ~Germany_FORECAST.date, y = ~Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
labs(title="Forecast", x = "Date", y="Confirmed")
p
p <- plot_ly(data = as.data.frame(Germany_XTS))%>%
add_lines(x = ~Germany_XTS$date, y = ~Germany_XTS$Confirmed, color=I("green"), name="Confirmed Cases")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,2], ymax = ~Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,1], ymax = ~Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = ~Germany_FORECAST.date, y = ~Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
labs(title="Forecast", x = "Date", y="Confirmed")
p
p <- plot_ly(data = as.data.frame(Germany_XTS))%>%
add_lines(x = ~Germany_XTS$date, y = ~Germany_XTS$Confirmed, color=I("green"), name="Confirmed Cases")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,2], ymax = ~Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,1], ymax = ~Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = ~Germany_FORECAST.date, y = ~Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
layout(title="Forecast",x ="Date")
p
p <- plot_ly(data = as.data.frame(Germany_XTS))%>%
add_lines(x = ~Germany_XTS$date, y = ~Germany_XTS$Confirmed, color=I("green"), name="Confirmed Cases")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,2], ymax = ~Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,1], ymax = ~Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = ~Germany_FORECAST.date, y = ~Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
layout(title="Forecast",yaxis ="Date")
p
p <- plot_ly(data = as.data.frame(Germany_XTS))%>%
add_lines(x = ~Germany_XTS$date, y = ~Germany_XTS$Confirmed, color=I("green"), name="Confirmed Cases")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,2], ymax = ~Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,1], ymax = ~Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = ~Germany_FORECAST.date, y = ~Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
layout(title="Forecast")
p
Germany_FORECAST <- forecast.HoltWinters(Germany_FIT, h = forecast_length)
Germany_FORECAST <- predict.HoltWinters(Germany_FIT, h = forecast_length)
?forecast()
shiny::runApp()
runApp()
runApp()
>>>>>>> origin/master
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
=======
remove(Germany_FIT)
remove(Germany)
remove(Germany_XTS)
remove(stocks)
remove(stocks.daily)
remove(a)
remove(forecast_length)
remove(enddate)
remove(Germany_FORECAST)
remove(Germany_FORECAST.date)
remove(Germany_STL)
remove(Germany_TS)
remove(stocks.end)
remove(stocks.start)
remvoe(stocks.train)
remove(stocks.train)
remove(stocks.test)
remove(startdate)
>>>>>>> origin/master
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
shiny::runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
source('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard/Scripts/Covid-19-novel.R', echo=TRUE)
runApp()
load("H:/Hochschule/Hochschule/MasterProjekt/Data Science/Hochschule Kaiserslautern COVID-19 Dashboard/.RData")
remove(map_data)
remove(map_github)
remove(merging)
remove(world_sf)
remove(world_sp)
remove(world_test)
remove(world_test_sf)
remove(allInfects)
remove(d)
remove(group_by_deaths())
as.function(group_by_deaths())
View(group_by_deaths)
remove(worldMapEnv)
remove(PATHTOJSON)
library(tidyverse)
library(utils)
library(dplyr)
library(stringi)
#Static PATH to csv files from ohter github Repository
PATH <- paste(getwd(),"/Sources/covid-19/data",sep="")
#Read the data from the github Repository
path_to_data <- paste(PATH,"/time-series-19-covid-combined.csv",sep = "")
path_to_glossar <-paste(PATH,"/glossar.csv",sep = "")
glossar <-read.csv(path_to_glossar,sep = ";")
data_from_github <- read.csv(path_to_data,sep = ",")
data_from_github$Date <- as.Date(data_from_github$Date)
data_from_github$Country.Region <- as.character(data_from_github$Country.Region)
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "US", "United States")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Brazzaville)","Democratic Republic of the Congo")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Kinshasa)","Democratic Republic of the Congo")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Korea, South", "Republic of Korea")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Laos","Lao PDR")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Russia","Russian Federation")
colnames(data_from_github)[2]<-"Country"
colnames(data_from_github)[3]<-"Province"
data_from_github <- select(data_from_github,-c(Lat,Long))
#data_from_github <- from_github %>% group_by(Date,Country) %>% summarise(Lat=max(Lat),Long=max(Long),Confirmed=sum(Confirmed),Recovered=sum(Recovered),Deaths=sum(Deaths))
data_from_github$Confirmed <- as.numeric(data_from_github$Confirmed)
data_from_github$Recovered <- as.numeric(data_from_github$Recovered)
data_from_github$Deaths <- as.numeric(data_from_github$Deaths)
data_from_github$Province <- as.character(data_from_github$Province)
#handling NA´s for later calculations
data_from_github$Recovered[is.na(data_from_github$Recovered)]<- 0
data_from_github$Deaths[is.na(data_from_github$Deaths)]<- 0
data_from_github$Confirmed[is.na(data_from_github$Confirmed)]<- 0
#get population data from reference.csv file
path_to_population_data <- paste(PATH,"/reference.csv",sep= "")
population_data <- read.csv(path_to_population_data,sep = ",")
population_data$Population[is.na(population_data$Population)] <- 0
#prepare for inner_join with @data_from_github
colnames(population_data)[8]<-"Country"
colnames(population_data)[7]<- "Province"
population_data$Country <- as.character(population_data$Country)
population_data$Province <- as.character(population_data$Province)
population_data$Population <- as.numeric(population_data$Population)
#adding logarithmic scaling to the dataframe for better color grading on the leaflet map of the shiny app. every logarithmic scaling with -inf as value was replaced with an -1. Also format digits after comma.
data_from_github <- mutate(data_from_github,logarithmic = log(Confirmed))
data_from_github$logarithmic[is.infinite(data_from_github$logarithmic)]<- -1
data_from_github$logarithmic <- format(round(data_from_github$logarithmic, 2), nsmall=2)
data_from_github$logarithmic <- as.numeric(data_from_github$logarithmic)
#inner join with @data_from_github and @population data frame
data_from_github <- left_join(data_from_github,population_data, by=c("Country","Province"))
colnames(data_from_github)[15]<-"Long"
#adding prevelance analysis. specific: Infected per 100k people. Also format digits after comma
data_from_github <- mutate(data_from_github,prevelance_100k = (Confirmed/Population)*100000)
data_from_github$prevelance_100k <- format(round(data_from_github$prevelance_100k, 2),nsmall = 2)
data_from_github$prevelance_100k <- as.numeric(data_from_github$prevelance_100k)
#adding All-cause mortality. Also format digits after comma.
data_from_github <- mutate(data_from_github,all_case_mortality_100k = (Deaths/Population)*100000)
data_from_github$all_case_mortality_100k <- format(round(data_from_github$all_case_mortality_100k, 2),nsmall = 2)
data_from_github$all_case_mortality_100k <- as.numeric(data_from_github$all_case_mortality_100k)
#adding cause-fatality-ratio. Also format digits after comma.
data_from_github <- mutate(data_from_github,case_fatality_rate = (Deaths/Confirmed)*100)
data_from_github$case_fatality_rate[is.nan(data_from_github$case_fatality_rate)]<- 0
data_from_github$case_fatality_rate <- format(round(data_from_github$case_fatality_rate, 2),nsmall = 2)
data_from_github$case_fatality_rate <- as.numeric(data_from_github$case_fatality_rate)
data_from_github$Population <- format(data_from_github$Population,big.mark = ".",decimal.mark = ",")
#Handling NA´s and Infites caused by missing population data
data_from_github$prevelance_100k[is.na(data_from_github$prevelance_100k)]<- 0
data_from_github$prevelance_100k[is.infinite(data_from_github$prevelance_100k)]<- 0
data_from_github$all_case_mortality_100k[is.na(data_from_github$all_case_mortality_100k)]<- 0
data_from_github$all_case_mortality_100k[is.infinite(data_from_github$all_case_mortality_100k)]<- 0
data_from_github$case_fatality_rate[is.na(data_from_github$case_fatality_rate)]<- 0
data_from_github$case_fatality_rate[is.infinite(data_from_github$case_fatality_rate)]<- 0
data_from_github$Lat[is.na(data_from_github$Lat)]<- 0
data_from_github$Long[is.na(data_from_github$Long)]<- 0
Splitted_Global_DF <- split(data_from_github, data_from_github$Country)
shiny::runApp()
runApp()
runApp()
save.image("H:/Hochschule/Hochschule/MasterProjekt/Data Science/Hochschule Kaiserslautern COVID-19 Dashboard/.RData")
runApp()
