data_from_github$Date <- as.Date(data_from_github$Date)
data_from_github$Country.Region <- as.character(data_from_github$Country.Region)
map_data <- group_by_deaths(data_from_github)
allInfects <- sum(map_data$Confirmed, na.rm = TRUE)
pal <- colorFactor(c("#FFBF42","#E89A3C","#FF954F","#E8683C","#FF5742"), domain = map_data$Confirmed)
map_github <- leaflet(map_data)%>%
addTiles(urlTemplate = "https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png")%>%
addCircles(lng = ~Long,
lat = ~Lat,
weight = 1,
radius = map_data$Confirmed,
color = ~pal(Confirmed),
popup = paste(map_data$Country,"<br/>Confirmed: <b>",map_data$Confirmed, "</b><br/> Recovered: ",map_data$Recovered, "<br/> Deaths: ",map_data$Deaths))
map_github
View(GEOJSONBORDERS)
GEOJSONBORDERS@data[["ADMIN"]]
ALLUS <- data_from_github$Country.Region %>% which("US")
ALLUS <- data_from_github %>% which(Country.Region == "US")
ALLUS <- data_from_github %>% grepl("US",data_from_github$Country.Region)
ALLUS <- data_from_github %>% which(data_from_github$Country.Region,Country.Region == "US")
ALLUS <- data_from_github %>% which(data_from_github$Country.Region,Country.Region == GEOJSONBORDERS@data[["ADMIN"]])
ALLUS <- data_from_github %>% which(Country.Region == GEOJSONBORDERS@data[["ADMIN"]])
ALLUS <- data_from_github %>% which(Country.Region && GEOJSONBORDERS@data[["ADMIN"]])
ALLUS <- data_from_github %>% which(Country.Region,Country.Region && GEOJSONBORDERS@data[["ADMIN"]])
ALLUS <- data_from_github %>% which(Country.Region && GEOJSONBORDERS@data[["ADMIN"]])
ALLUS <- data_from_github %>% Country.Region["US"]
ALLUS <- data_from_github %>% data_from_github$Country.Region["US"]
ALLUS <- data_from_github$Country.Region["US"]
data_from_github$Country.Region["US"]
data_from_github$Country.Region[US]
data_from_github$Country.Region["Germany"]
data_from_github
data_from_github["US"]
data_from_github["Country.Region"]
data_from_github["Country.Region"["US"]]
data_from_github[["US"]]
which(data_from_github$Country.Region && "US")
data_from_github$Country.Region[c("US")]
select(data_from_github$Country.Region, "US")
select(data_from_github$Country.Region, matches"US")
select(data_from_github$Country.Region, matches("US"))
exit
ALLUS <- data_from_github %>% filter(Country.Region == "US")
View(ALLUS)
ALLUS <- data_from_github %>% rename(filter(Country.Region == "US"),"United states of America")
ALLUS <- data_from_github %>% rename(filter(Country.Region == "US"),"United states of America")
replace(data_from_github$Country.Region, data_from_github$Country.Region == "US", "United States of America")
View(data_from_github)
replace(data_from_github$Country.Region, data_from_github$Country.Region = "US", "United States of America")
replace(data_from_github$Country.Region, data_from_github$Country.Region && data_from_github$Country.Region["US"], "United States of America")
replace(data_from_github$Country.Region, data_from_github$Country.Region == "US", "United States of America")
str_replace(data_from_github$Country.Region,"US","United States of America")
View(ALLUS)
ALLUS <- str_replace(ALLUS$Country.Region,"US","United States of America")
ALLUS <- data_from_github %>% rename(filter(Country.Region == "US"),"United states of America")
ALLUS <- data_from_github %>% filter(Country.Region == "US")
ALLUS$Country.Region <- str_replace(ALLUS$Country.Region,"US","United States of America")
View(ALLUS)
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "US", "United States of America")
View(data_from_github)
geo_spatial <- GEOJSONBORDERS@data[["ADMIN"]]
geo_spatial <- as.data.frame(geo_spatial)
View(geo_spatial)
View(data_from_github)
all_country_from_data <- group_by(data_from_github$Country.Region)
all_country_from_data <- group_by(data_from_github, data_from_github$Country.Region)
View(all_country_from_data)
all_country_from_data <- group_by(data_from_github, data_from_github$Country.Region) %>% summarise(Country.Region = data_from_github$Country.Region)
all_country_from_data <- group_by(data_from_github, data_from_github$Country.Region) %>% summarise(Country.Region = sum(data_from_github$Country.Region))
all_country_from_data <- group_by(data_from_github, data_from_github$Country.Region) %>% summarise(Date = max(Date))
GEOJSONBORDERS@data[["ADMIN"]] <- as.character(GEOJSONBORDERS@data[["ADMIN"]])
View(GEOJSONBORDERS)
geo_spatial <- filter(GEOJSONBORDERS@data[["ADMIN"]] == data_from_github$Country.Region)
geo_spatial <- filter(GEOJSONBORDERS@data[["ADMIN"]] && data_from_github$Country.Region)
geo_spatial <- filter(GEOJSONBORDERS@data[["ADMIN"]], data_from_github$Country.Region)
geo_spatial <- filter(GEOJSONBORDERS, GEOJSONBORDERS@data[["ADMIN"]]  == data_from_github$Country.Region)
geo_spatial <- filter(GEOJSONBORDERS@data, GEOJSONBORDERS@data[["ADMIN"]]  == data_from_github$Country.Region)
geo_spatial <- filter(GEOJSONBORDERS@data, GEOJSONBORDERS@data[["ADMIN"]]  == data_from_github$Country.Region, data_from_github$Confirmed>0)
View(GEOJSONBORDERS)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(spData)
install.packages("spData")
world_sp <- as(world, "Spatial")
world_sp = as(world, "Spatial")
library(spData)
world_sp = as(world, "Spatial")
world_sp = as(world, "Spatial")
world_sp = as(world, "Spatial")
world_sf = st_as_sf(world_sp)
install.packages("sf")
library(sf)
world_sp = as(world, "Spatial")
View(world_sp)
world_sp %>%
filter(name_long == "England")
world %>%
filter(name_long == "United Kingdom")
world %>% filter(grepl(pattern = "United", x = name_long))
world_sf = st_as_sf(world_sp)
world_sf %>%
filter(name_long == "England")
world_sf %>%
filter(name_long == "United Kingdom")
View(world_sf)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
qpal <- colorQuantile("Blues", data_from_github$Confirmed, n = 7)
runApp()
runApp()
View(qpal)
remove("qpal")
runApp()
runApp()
runApp()
remove("ALLUS")
remove("GEOJSONBORDERS")
remove(c("all_country_from_data","geo_spatial"))
remove("all_country_from_data")
remove("geo_spatial")
shiny::runApp()
install.packages("tigris")
library(tidyverse)
library(utils)
library(leaflet)
library(dplyr)
library(rgdal)
library(spData)
library(sf)
library(tigris)
merging <- geo_join(spatial_data = world_sf,data_frame = data_from_github,'name_long','Country.Region')
View(merging)
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "US", "United States")
View(data_from_github)
merging <- geo_join(spatial_data = world_sf,data_frame = data_from_github,'name_long','Country.Region')
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "United States of America", "United States")
merging <- geo_join(spatial_data = world_sf,data_frame = data_from_github,'name_long','Country.Region')
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo","Democratic Republic of the Congo")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Brazzaville)","Democratic Republic of the Congo")
#Read the data from the github Repository
path_to_data <- paste(PATH,"/time-series-19-covid-combined.csv",sep = "")
data_from_github <- read.csv(path_to_data,sep = ",")
data_from_github$Date <- as.Date(data_from_github$Date)
data_from_github$Country.Region <- as.character(data_from_github$Country.Region)
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "United States of America", "United States")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "United States of America", "United States")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, c("Congo (Brazzaville)","Congo (Kinshasa)"),"Democratic Republic of the Congo")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Kinshasa)","Democratic Republic of the Congo")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Kinshasa)","Democratic Republic of the Congo")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo(Kinshasa)","Democratic Republic of the Congo")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo","Democratic Republic of the Congo")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "US", "United States")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo","Democratic Republic of the Congo")
#Read the data from the github Repository
path_to_data <- paste(PATH,"/time-series-19-covid-combined.csv",sep = "")
data_from_github <- read.csv(path_to_data,sep = ",")
data_from_github$Date <- as.Date(data_from_github$Date)
data_from_github$Country.Region <- as.character(data_from_github$Country.Region)
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "US", "United States")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo","Democratic Republic of the Congo")
merging <- geo_join(spatial_data = world_sf,data_frame = data_from_github,'name_long','Country.Region')
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Russia","Russian Federation")
merging <- geo_join(spatial_data = world_sf,data_frame = data_from_github,'name_long','Country.Region')
merging <- geo_join(spatial_data = world_sf,data_frame = data_from_github,'name_long','Province.State')
merging <- geo_join(spatial_data = world_sf,data_frame = data_from_github,'name_long',c('Country.Region','Province.State'))
rlang::last_error()
merging <- geo_join(spatial_data = world_sf,data_frame = data_from_github,'name_long','Country.Region','Province.State')
colnames(data_from_github)[1]<-"Country"
colnames(data_from_github)[2]<-"Province"
#Read the data from the github Repository
path_to_data <- paste(PATH,"/time-series-19-covid-combined.csv",sep = "")
data_from_github <- read.csv(path_to_data,sep = ",")
data_from_github$Date <- as.Date(data_from_github$Date)
data_from_github$Country.Region <- as.character(data_from_github$Country.Region)
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "US", "United States")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo","Democratic Republic of the Congo")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Russia","Russian Federation")
colnames(data_from_github)[2]<-"Country"
colnames(data_from_github)[3]<-"Province"
merging <- geo_join(spatial_data = world_sf,data_frame = data_from_github,'name_long','Country.Region')
merging <- geo_join(spatial_data = world_sf,data_frame = data_from_github,'name_long','Country')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
world_test = as(world,"Spatial")
world_test_sf = st_as_sf(world_test)
runApp()
runApp()
runApp()
runApp()
runApp()
View(world_sf)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(tidyverse)
library(utils)
library(leaflet)
library(dplyr)
library(rgdal)
library(spData)
library(sf)
library(tigris)
#Static PATH to csv files from ohter github Repository
PATH <- paste(getwd(),"/Sources/NovelCOVID-19/data",sep="")
PATHTOJSON <- paste(getwd(),"/Sources/json",sep = "")
#Make git pull with an .bat file in the Scripts Folder (should be local and not on remote github repository)
d <- paste(getwd(),"/Scripts/GitUpdate.bat",sep = "")
shell.exec(d)
#Read the data from the github Repository
path_to_data <- paste(PATH,"/time-series-19-covid-combined.csv",sep = "")
data_from_github <- read.csv(path_to_data,sep = ",")
data_from_github$Date <- as.Date(data_from_github$Date)
data_from_github$Country.Region <- as.character(data_from_github$Country.Region)
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "US", "United States")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo","Democratic Republic of the Congo")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Russia","Russian Federation")
colnames(data_from_github)[2]<-"Country"
colnames(data_from_github)[3]<-"Province"
merging <- geo_join(spatial_data = world_sf,data_frame = data_from_github,'name_long','Country')
#Combined Time Series with help function
map_data <- group_by_deaths(data_from_github)
allInfects <- sum(map_data$Confirmed, na.rm = TRUE)
pal <- colorFactor(c("#FFBF42","#E89A3C","#FF954F","#E8683C","#FF5742"), domain = map_data$Confirmed)
map_github <- leaflet(map_data)%>%
addTiles(urlTemplate = "https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png")%>%
addCircles(lng = ~Long,
lat = ~Lat,
weight = 1,
radius = map_data$Confirmed,
color = ~pal(Confirmed),
popup = paste(map_data$Country,"<br/>Confirmed: <b>",map_data$Confirmed, "</b><br/> Recovered: ",map_data$Recovered, "<br/> Deaths: ",map_data$Deaths))
map_github
#Read the data from the github Repository
path_to_data <- paste(PATH,"/time-series-19-covid-combined.csv",sep = "")
#Make git pull with an .bat file in the Scripts Folder (should be local and not on remote github repository)
d <- paste(getwd(),"/Scripts/GitUpdate.bat",sep = "")
shell.exec(d)
shell.exec(d)
#Read the data from the github Repository
path_to_data <- paste(PATH,"/time-series-19-covid-combined.csv",sep = "")
data_from_github <- read.csv(path_to_data,sep = ",")
data_from_github$Date <- as.Date(data_from_github$Date)
data_from_github$Country.Region <- as.character(data_from_github$Country.Region)
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "US", "United States")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo","Democratic Republic of the Congo")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Russia","Russian Federation")
colnames(data_from_github)[2]<-"Country"
colnames(data_from_github)[3]<-"Province"
runApp()
shiny::runApp()
View(merging)
#Read the data from the github Repository
path_to_data <- paste(PATH,"/time-series-19-covid-combined.csv",sep = "")
data_from_github <- read.csv(path_to_data,sep = ",")
data_from_github$Date <- as.Date(data_from_github$Date)
data_from_github$Country.Region <- as.character(data_from_github$Country.Region)
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "US", "United States")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Brazzaville)","Democratic Republic of the Congo")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Kinshasa)","Democratic Republic of the Congo")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Korea, South", "Republic of Korea")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Laos","Lao PDR")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Russia","Russian Federation")
colnames(data_from_github)[2]<-"Country"
colnames(data_from_github)[3]<-"Province"
#Combined Time Series with help function
map_data <- group_by_deaths(data_from_github)
map_github <- leaflet(data_from_github)%>%
addTiles(urlTemplate = "https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png")%>%
addPolygons(data = world_sf,
label = world_sf$name_long )
map_github
install.packages("maps")
library(maps)
pal <- colorFactor(c("#FFBF42","#E89A3C","#FF954F","#E8683C","#FF5742"), domain = map_data$Confirmed)
map_github <- leaflet(data_from_github)%>%
addTiles(urlTemplate = "https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png")%>%
addPolygons(data = world.cities,
label = world_sf$name_long )
view(world.cities)
view(world)
view(worldMapEnv)
worldMapEnv
data("worldMapEnv")
force(worldMapEnv)
#Read the data from the github Repository
path_to_data <- paste(PATH,"/time-series-19-covid-combined.csv",sep = "")
data_from_github <- read.csv(path_to_data,sep = ",")
data_from_github$Date <- as.Date(data_from_github$Date)
data_from_github$Country.Region <- as.character(data_from_github$Country.Region)
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "US", "United States")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Brazzaville)","Democratic Republic of the Congo")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Kinshasa)","Democratic Republic of the Congo")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Korea, South", "Republic of Korea")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Laos","Lao PDR")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Russia","Russian Federation")
colnames(data_from_github)[2]<-"Country"
colnames(data_from_github)[3]<-"Province"
runApp()
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Brazzaville)","Democratic Republic of the Congo")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Kinshasa)","Democratic Republic of the Congo")
#Read the data from the github Repository
path_to_data <- paste(PATH,"/time-series-19-covid-combined.csv",sep = "")
data_from_github <- read.csv(path_to_data,sep = ",")
data_from_github$Date <- as.Date(data_from_github$Date)
data_from_github$Country.Region <- as.character(data_from_github$Country.Region)
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "US", "United States")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Brazzaville)","Democratic Republic of the Congo")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Kinshasa)","Democratic Republic of the Congo")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Korea, South", "Republic of Korea")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Laos","Lao PDR")
data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Russia","Russian Federation")
colnames(data_from_github)[2]<-"Country"
colnames(data_from_github)[3]<-"Province"
data_from_github <- mutate(data_from_github, logarithmic = log(data_from_github$Confirmed))
View(data_from_github)
data_from_github$Recovered[is.na(tmp_final_data$Recovered)]<- 0
data_from_github$Recovered[is.na(data_from_github$Recovered)]<- 0
data_from_github$logarithmic[is.na(data_from_github$logarithmic)]<- 0
data_from_github$logarithmic[is.infinite(data_from_github$logarithmic)]<- 0
#Read the data from the github Repository
path_to_data <- paste(PATH,"/time-series-19-covid-combined.csv",sep = "")
data_from_github <- read.csv(path_to_data,sep = ",")
data_from_github$Date <- as.Date(data_from_github$Date)
data_from_github$Country.Region <- as.character(data_from_github$Country.Region)
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "US", "United States")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Brazzaville)","Democratic Republic of the Congo")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Kinshasa)","Democratic Republic of the Congo")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Korea, South", "Republic of Korea")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Laos","Lao PDR")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Russia","Russian Federation")
colnames(data_from_github)[2]<-"Country"
colnames(data_from_github)[3]<-"Province"
data_from_github <- mutate(data_from_github, logarithmic = log(data_from_github$Confirmed))
data_from_github$Recovered[is.na(data_from_github$Recovered)]<- 0
data_from_github$logarithmic[is.infinite(data_from_github$logarithmic)]<- 0
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data_from_github$logarithmic[is.infinite(data_from_github$logarithmic)]<- -1
data_from_github <- mutate(data_from_github, logarithmic = log(data_from_github$Confirmed))
data_from_github$Recovered[is.na(data_from_github$Recovered)]<- 0
data_from_github$logarithmic[is.infinite(data_from_github$logarithmic)]<- -1
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(world_sf)
runApp()
runApp()
#Static PATH to csv files from ohter github Repository
PATH <- paste(getwd(),"/Sources/NovelCOVID-19/data",sep="")
PATHTOJSON <- paste(getwd(),"/Sources/json",sep = "")
#Make git pull with an .bat file in the Scripts Folder (should be local and not on remote github repository)
d <- paste(getwd(),"/Scripts/GitUpdate.bat",sep = "")
shell.exec(d)
#Read the data from the github Repository
path_to_data <- paste(PATH,"/time-series-19-covid-combined.csv",sep = "")
data_from_github <- read.csv(path_to_data,sep = ",")
data_from_github$Date <- as.Date(data_from_github$Date)
data_from_github$Country.Region <- as.character(data_from_github$Country.Region)
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "US", "United States")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Brazzaville)","Democratic Republic of the Congo")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Kinshasa)","Democratic Republic of the Congo")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Korea, South", "Republic of Korea")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Laos","Lao PDR")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Russia","Russian Federation")
colnames(data_from_github)[2]<-"Country"
colnames(data_from_github)[3]<-"Province"
data_from_github <- mutate(data_from_github, logarithmic = log(data_from_github$Confirmed))
data_from_github$Recovered[is.na(data_from_github$Recovered)]<- 0
data_from_github$logarithmic[is.infinite(data_from_github$logarithmic)]<- -1
runApp()
shiny::runApp()
runApp()
#Static PATH to csv files from ohter github Repository
PATH <- paste(getwd(),"/Sources/covid-19/data",sep="")
library(tidyverse)
library(utils)
library(leaflet)
library(dplyr)
library(rgdal)
library(spData)
library(sf)
library(tigris)
library(maps)
#Static PATH to
#Static PATH to csv files from ohter github Repository
PATH <- paste(getwd(),"/Sources/covid-19/data",sep="")
PATHTOJSON <- paste(getwd(),"/Sources/json",sep = "")
#Make git pull with an .bat file in the Scripts Folder (should be local and not on remote github repository)
d <- paste(getwd(),"/Scripts/GitUpdate.bat",sep = "")
shell.exec(d)
#Read the data from the github Repository
path_to_data <- paste(PATH,"/time-series-19-covid-combined.csv",sep = "")
data_from_github <- read.csv(path_to_data,sep = ",")
data_from_github$Date <- as.Date(data_from_github$Date)
data_from_github$Country.Region <- as.character(data_from_github$Country.Region)
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "US", "United States")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Brazzaville)","Democratic Republic of the Congo")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Kinshasa)","Democratic Republic of the Congo")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Korea, South", "Republic of Korea")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Laos","Lao PDR")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Russia","Russian Federation")
colnames(data_from_github)[2]<-"Country"
colnames(data_from_github)[3]<-"Province"
shiny::runApp()
shiny::runApp()
runApp('C:/Users/Marco/Desktop/DVCOV19/DVCOV19/DVCOV19.R')
?selectInput
runApp()
runApp()
runApp()
runApp('C:/Users/Marco/Desktop/DVCOV19/DVCOV19/DVCOV19.R')
runApp('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard')
runApp()
runApp('C:/Users/Marco/Desktop/DVCOV19/DVCOV19/DVCOV19.R')
runApp('C:/Users/Marco/Desktop/COVID-19-Shiny-Dashboard/COVID-19-Shiny-Dashboard')
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(tidyverse)
library(utils)
library(leaflet)
library(dplyr)
library(rgdal)
library(spData)
library(sf)
library(tigris)
library(maps)
#Static PATH to csv files from ohter github Repository
PATH <- paste(getwd(),"/Sources/covid-19/data",sep="")
PATHTOJSON <- paste(getwd(),"/Sources/json",sep = "")
#Read the data from the github Repository
path_to_data <- paste(PATH,"/time-series-19-covid-combined.csv",sep = "")
path_to_glossar <-paste(PATH,"/glossar.csv",sep = "")
glossar <-read.csv(path_to_glossar,sep = ";")
data_from_github <- read.csv(path_to_data,sep = ",")
data_from_github$Date <- as.Date(data_from_github$Date)
data_from_github$Country.Region <- as.character(data_from_github$Country.Region)
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "US", "United States")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Brazzaville)","Democratic Republic of the Congo")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Kinshasa)","Democratic Republic of the Congo")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Korea, South", "Republic of Korea")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Laos","Lao PDR")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Russia","Russian Federation")
colnames(data_from_github)[2]<-"Country"
colnames(data_from_github)[3]<-"Province"
data_from_github <- mutate(data_from_github, logarithmic = log(data_from_github$Confirmed))
data_from_github$Recovered[is.na(data_from_github$Recovered)]<- 0
data_from_github$logarithmic[is.infinite(data_from_github$logarithmic)]<- -1
path_to_glossar <-paste(PATH,"/glossar.csv",sep = "")
glossar <-read.csv(path_to_glossar,sep = ";")
runApp()
