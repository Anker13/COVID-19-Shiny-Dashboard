stocks.train <- ts(as.numeric(stocks.train), start = c(year(start(stocks.train)),month(start(stocks.train)), day(start(stocks.train))), end = c(year(end(stocks.train)),month(end(stocks.train)),day(end(stocks.train))),frequency = 365.25)
stocks.test <- ts(as.numeric(stocks.test), start = c(year(start(stocks.test)),month(start(stocks.test)), day(start(stocks.test))), end = c(year(end(stocks.test)),month(end(stocks.test)),day(end(stocks.test))),frequency = 365.25)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
stocks <- xts(Germany$Confirmed,order.by = as.Date(Germany$Date,"%Y-%m-%d"))
View(stocks)
# playground for Time Series
Germany <- Splitted_Global_DF[["Germany"]]
Germany <- Germany %>% arrange(Date)
View(Germany)
Germany <- Germany %>% arrange(Date)
# playground for Time Series
Germany <- Splitted_Global_DF[["Germany"]]
Germany <- Germany %>% arrange(Date)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Date,start = c(year(start(Germany$Date)),month(start(Germany$Date)), day(start(Germany$Date))), end = c(year(end(Germany$Date)), month(end(Germany$Date)),day(end(Germany$Date))))
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed,start = c(year(start(Germany$Date)),month(start(Germany$Date)), day(start(Germany$Date))), end = c(year(end(Germany$Date)), month(end(Germany$Date)),day(end(Germany$Date))))
remove(myts)
remove(forecast_length)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
startdate <- Germany$Date[1]
enddate <- Germany$Date[-1]
enddate <- Germany$Date[length(Germany$Date)]
Germany_TS <- ts(Germany$Confirmed,start = Germany$Date[1], end = Germany$Date[length(Germany$Date)])
Germany_TS <- ts(Germany$Confirmed,start = as.Date(Germany$Date[1]), end = as.Date(Germany$Date[length(Germany$Date)]))
day(Germany$Date[1])
autoplot(Germany_TS)
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_forecast()
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_forecast(data = Germany_TS)
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_forecast()
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_forecast(show.legend = TRUE)
p
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_line()
geom_forecast(show.legend = TRUE)
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_line()
geom_forecast(show.legend = TRUE)
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_line()
geom_forecast()
p
geom_forecast(showgap = TRUE)
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_line()
geom_forecast(showgap = TRUE)
p
# playground for Time Series
Germany <- Splitted_Global_DF[["Germany"]]
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
autoplot(Germany$Confirmed)+geom_forecast()
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
autoplot(Germany)+geom_forecast()
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_line()
geom_forecast(showgap = TRUE)
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_forecast(showgap = TRUE)+
geom_line()
p
strftime()
?strftime()
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_forecast(showgap = TRUE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "2 weeks")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_forecast(showgap = TRUE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "2 days")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_forecast(showgap = TRUE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90))
geom_forecast(showgap = TRUE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90))+
geom_forecast(showgap = TRUE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90))+
geom_forecast(showgap = TRUE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
fig <- ggplotly(p)
fig
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90))+
geom_forecast(showgap = TRUE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "right")+
geom_forecast(showgap = TRUE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "right")+
geom_forecast(showgap = TRUE, show.legend = TRUE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "right")+
geom_forecast(show.legend = TRUE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "right")+
geom_forecast(show.legend = TRUE, showgap = FALSE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed, fill = Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "right")+
geom_forecast(show.legend = TRUE, showgap = FALSE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed, fill = Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "right")+
geom_forecast(show.legend = TRUE, showgap = FALSE)+
geom_line(show.legend = TRUE)
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "right")+
geom_forecast(show.legend = TRUE, showgap = FALSE)+
geom_line(show.legend = TRUE)
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "right")+
geom_forecast(show.legend = TRUE, showgap = FALSE)+
geom_line(show.legend = TRUE)+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "top")+
geom_forecast(show.legend = TRUE, showgap = FALSE)+
geom_line(show.legend = TRUE)+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 365.25)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 365)
Germany_STL <- stl(Germany_TS, s.window = "period")
plot(Germany_STL)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 7)
Germany_STL <- stl(Germany_TS, s.window = "period")
plot(Germany_STL)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 365.52)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = '365.25')
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 365.25)
Germany_STL <- stl(Germany_TS, s.window = "period")
plot(Germany_STL)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 365)
Germany_STL <- stl(Germany_TS, s.window = "period")
plot(Germany_STL)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 12)
Germany_STL <- stl(Germany_TS, s.window = "period")
plot(Germany_STL)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)])
Germany_STL <- stl(Germany_TS, s.window = "period")
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)])
Germany_STL <- stl(Germany_TS, s.window = "period")
plot(Germany_STL)
plot(Germany_TS)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 365)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 1)
Germany_STL <- stl(Germany_TS, s.window = "period")
?ts()
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- as.ts(Germany)
View(Germany_TS)
?as_ts()
?as.ts()
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- xts(Germany$Confirmed,Germany$Date)
View(Germany_TS)
plot(Germany_TS)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_XTS <- xts(Germany$Confirmed,Germany$Date)
Germany_TS <- ts(Germany_XTS, frequency = 365, start = c(year(start(Germany_XTS)),month(start(Germany_XTS)),day(start(Germany_XTS))), end = c(year(end(Germany_XTS)),month(end(Germany_XTS)),day(end(Germany_XTS))))
View(Germany_XTS)
Germany_TS <- ts(Germany_XTS, frequency = 365, start = c(year(start(Germany_XTS)),month(start(Germany_XTS)),day(start(Germany_XTS))))
view(Germany_TS)
plot(Germany_TS)
plot(forecast(ets(Germany_TS),10))
plot(forecast(ets(Germany_TS),10), xaxt = "n")
plot(forecast(ets(Germany_TS),10), xaxt = "n")
a = seq(Germany$Date[1],by = "days", length= length(Germany$Date))
axis(1, at =decimal_date(a), labels = format(a, "%Y %b %d"))
axis(0, at =decimal_date(a), labels = format(a, "%Y %b %d"))
axis(2, at =decimal_date(a), labels = format(a, "%Y %b %d"))
axis(1, at =decimal_date(a), labels = format(a, "%Y %b %d"))
p<- ggplot(data = Germany_TS, aes(x= Date, y=Confirmed))+
geom_line()
p
Germany_TS
view(Germany_TS)
p<- ggplot(data = Germany_TS)+
geom_line()
p
p<- ggplot(data = Germany_TS, aes(x=x,y=y))+
geom_line()
p
p<- ggplot(data = Germany_TS, aes(x=Series1,y=Series1))+
geom_line()
p
head(Germany_TS)
Germany_XTS$date <- time(Germany_XTS)
library(tidyverse)
library(utils)
library(dplyr)
library(dplyr)
library(stringi)
library(forecast)
library(plotly)
library(ggplot2)
library(TTR)
library(time)
library(lubridate)
library(xts)
Germany_XTS$date <- time(Germany_XTS)
Germany_XTS$date <- time(Germany_XTS[,1])
Germany_FIT <- auto.arima(Germany_XTS[,1])
View(Germany_FIT)
Germany_FORECAST <- forecast(Germany_FIT, h=14)
View(Germany_FORECAST)
plot(Germany_FORECAST)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_XTS <- xts(Germany,Germany$Date)
Germany_FIT <- auto.arima(Germany_XTS$Confirmed)
Germany_FIT <- auto.arima(Germany_XTS$Confirmed)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_XTS <- xts(Germany$Confirmed,Germany$Date)
Germany_FIT <- auto.arima(Germany_XTS[,1])
Germany_FORECAST <- forecast(Germany_FIT, h=14)
plot(Germany_FORECAST)
remove(Germany_XTS)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_XTS$Date <- Germany$Date
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_XTS <- structure(list(date=Germany$Date, Confirmed = Germany$Confirmed))
View(Germany_XTS)
Germany_FIT <- auto.arima(Germany_XTS[,1])
Germany_FIT <- auto.arima(Germany_XTS$Confirmed)
Germany_FORECAST <- forecast(Germany_FIT, h=14)
plot(Germany_FORECAST)
Germany_FIT <- auto.arima(Germany_XTS)
Germany_FIT <- auto.arima(Germany_XTS$Confirmed)
Germany_FORECAST <- forecast(Germany_FIT, h=14)
plot(Germany_FORECAST)
forecast_length <- 14
Germany_FORECAST <- forecast(Germany_FIT, h=forecast_length)
Germany_FORECAST.date <- seq(by=Germany_XTS$date[length(Germany_XTS$date)]-Germany_XTS$date[length(Germany_XTS$date)-1], len = forecast_length)
view(Germany_FORECAST.date)
Germany_FORECAST.date <- seq(as.POSIXct(Germany_XTS$date[Germany_XTS$date]),by=Germany_XTS$date[length(Germany_XTS$date)]-Germany_XTS$date[length(Germany_XTS$date)-1], len = forecast_length)
Germany_FORECAST.date <- seq(as.POSIXct(Germany_XTS$date[length(Germany_XTS$date)]),by=Germany_XTS$date[length(Germany_XTS$date)]-Germany_XTS$date[length(Germany_XTS$date)-1], len = forecast_length)
plot(Germany_FORECAST)
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("black"), name="observed")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("black"), name="observed")%>%
add_lines(x = format(Germany_FORECAST.date, "%Y-%b-%d"), y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p
Germany_FORECAST.date <- format(Germany_FORECAST.date, "%Y-%m-%d")
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("black"), name="observed")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("black"), name="observed")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("blue95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("blue80"), name ="80% confidence")
p
?I()
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("black"), name="observed")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")
p
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("black"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p
p <- plot_ly()%>%
layout(title = 'Forecasting of Confirmed Cases', xaxis='Date', yaxis='Cases')%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
layout(title = 'Forecasting of Confirmed Cases', xaxis='Date', yaxis='Cases')
p
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
# layout(title = 'Forecasting of Confirmed Cases', xaxis='Date', yaxis='Cases')
p
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
layout(title = "Forecasting of Confirmed Cases", xaxis="Date", yaxis="Cases")
p
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p <- p %>% layout(title = 'Forecasting of Confirmed Cases', xaxis='Date', yaxis='Cases')
p
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p <- p %>% layout(xaxis='Date', yaxis='Cases')
p
p <- plot_ly()%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p <- p %>% layout(xaxis=list("Date"), yaxis=list("Cases"))
p
p <- plot_ly(data = Germany_XTS)%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p <- plot_ly(data = Germany_XTS)%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p <- plot_ly(data = as.data.frame(Germany_XTS))%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="observed")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p
Germany_FORECAST.date[,14]
Germany_FORECAST.date[14]
view(Germany_FORECAST$lower[,1])
view(Germany_FORECAST$lower[14,1])
view(Germany_FORECAST$upper[14,1])
view(Germany_FORECAST$upper[14,2])
p <- plot_ly(data = as.data.frame(Germany_XTS), width = c(Germany_XTS$date[1],Germany_FORECAST.date[forecast_length]), height = c(Germany_XTS$Confirmed[1],Germany_FORECAST[forecast_length,2]) )%>%
add_lines(x = Germany_XTS$date, y =Germany_XTS$Confirmed, color=I("green"), name="Confirmed Cases")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,2], ymax = Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = Germany_FORECAST.date, ymin = Germany_FORECAST$lower[,1], ymax = Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = Germany_FORECAST.date, y = Germany_FORECAST$mean, color=I("blue"), name="prediction")
p <- plot_ly(data = as.data.frame(Germany_XTS))%>%
add_lines(x = ~Germany_XTS$date, y = ~Germany_XTS$Confirmed, color=I("green"), name="Confirmed Cases")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,2], ymax = ~Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,1], ymax = ~Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = ~Germany_FORECAST.date, y = ~Germany_FORECAST$mean, color=I("blue"), name="prediction")
p
p <- plot_ly(data = as.data.frame(Germany_XTS))%>%
add_lines(x = ~Germany_XTS$date, y = ~Germany_XTS$Confirmed, color=I("green"), name="Confirmed Cases")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,2], ymax = ~Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,1], ymax = ~Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = ~Germany_FORECAST.date, y = ~Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
layout(xaxis="Date")
p
p <- plot_ly(data = as.data.frame(Germany_XTS))%>%
add_lines(x = ~Germany_XTS$date, y = ~Germany_XTS$Confirmed, color=I("green"), name="Confirmed Cases")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,2], ymax = ~Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,1], ymax = ~Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = ~Germany_FORECAST.date, y = ~Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
layout(title="Forecast")
p
p <- plot_ly(data = as.data.frame(Germany_XTS))%>%
add_lines(x = ~Germany_XTS$date, y = ~Germany_XTS$Confirmed, color=I("green"), name="Confirmed Cases")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,2], ymax = ~Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,1], ymax = ~Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = ~Germany_FORECAST.date, y = ~Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
layout(title="Forecast",xaxis="Date")
p
p <- plot_ly(data = as.data.frame(Germany_XTS))%>%
add_lines(x = ~Germany_XTS$date, y = ~Germany_XTS$Confirmed, color=I("green"), name="Confirmed Cases")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,2], ymax = ~Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,1], ymax = ~Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = ~Germany_FORECAST.date, y = ~Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
labs(title="Forecast", x = "Date", y="Confirmed")
p
p <- plot_ly(data = as.data.frame(Germany_XTS))%>%
add_lines(x = ~Germany_XTS$date, y = ~Germany_XTS$Confirmed, color=I("green"), name="Confirmed Cases")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,2], ymax = ~Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,1], ymax = ~Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = ~Germany_FORECAST.date, y = ~Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
labs(title="Forecast", x = "Date", y="Confirmed")
p
p <- plot_ly(data = as.data.frame(Germany_XTS))%>%
add_lines(x = ~Germany_XTS$date, y = ~Germany_XTS$Confirmed, color=I("green"), name="Confirmed Cases")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,2], ymax = ~Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,1], ymax = ~Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = ~Germany_FORECAST.date, y = ~Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
layout(title="Forecast",x ="Date")
p
p <- plot_ly(data = as.data.frame(Germany_XTS))%>%
add_lines(x = ~Germany_XTS$date, y = ~Germany_XTS$Confirmed, color=I("green"), name="Confirmed Cases")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,2], ymax = ~Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,1], ymax = ~Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = ~Germany_FORECAST.date, y = ~Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
layout(title="Forecast",yaxis ="Date")
p
p <- plot_ly(data = as.data.frame(Germany_XTS))%>%
add_lines(x = ~Germany_XTS$date, y = ~Germany_XTS$Confirmed, color=I("green"), name="Confirmed Cases")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,2], ymax = ~Germany_FORECAST$upper[,2], color=I("gray95"), name ="95% confidence")%>%
add_ribbons(x = ~Germany_FORECAST.date, ymin = ~Germany_FORECAST$lower[,1], ymax = ~Germany_FORECAST$upper[,1], color=I("gray80"), name ="80% confidence")%>%
add_lines(x = ~Germany_FORECAST.date, y = ~Germany_FORECAST$mean, color=I("blue"), name="prediction")%>%
layout(title="Forecast")
p
Germany_FORECAST <- forecast.HoltWinters(Germany_FIT, h = forecast_length)
Germany_FORECAST <- predict.HoltWinters(Germany_FIT, h = forecast_length)
?forecast()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
remove(Germany_FIT)
remove(Germany)
remove(Germany_XTS)
remove(stocks)
remove(stocks.daily)
remove(a)
remove(forecast_length)
remove(enddate)
remove(Germany_FORECAST)
remove(Germany_FORECAST.date)
remove(Germany_STL)
remove(Germany_TS)
remove(stocks.end)
remove(stocks.start)
remvoe(stocks.train)
remove(stocks.train)
remove(stocks.test)
remove(startdate)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
