data_from_github <- read.csv(path_to_data,sep = ",")
data_from_github$Date <- as.Date(data_from_github$Date)
data_from_github$Country.Region <- as.character(data_from_github$Country.Region)
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "US", "United States")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Brazzaville)","Democratic Republic of the Congo")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Congo (Kinshasa)","Democratic Republic of the Congo")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Korea, South", "Republic of Korea")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Laos","Lao PDR")
#data_from_github$Country.Region <- str_replace(data_from_github$Country.Region, "Russia","Russian Federation")
colnames(data_from_github)[2]<-"Country"
colnames(data_from_github)[3]<-"Province"
data_from_github <- select(data_from_github,-c(Lat,Long))
#data_from_github <- from_github %>% group_by(Date,Country) %>% summarise(Lat=max(Lat),Long=max(Long),Confirmed=sum(Confirmed),Recovered=sum(Recovered),Deaths=sum(Deaths))
data_from_github$Confirmed <- as.numeric(data_from_github$Confirmed)
data_from_github$Recovered <- as.numeric(data_from_github$Recovered)
data_from_github$Deaths <- as.numeric(data_from_github$Deaths)
data_from_github$Province <- as.character(data_from_github$Province)
#handling NA´s for later calculations
data_from_github$Recovered[is.na(data_from_github$Recovered)]<- 0
data_from_github$Deaths[is.na(data_from_github$Deaths)]<- 0
data_from_github$Confirmed[is.na(data_from_github$Confirmed)]<- 0
#get population data from reference.csv file
path_to_population_data <- paste(PATH,"/reference.csv",sep= "")
population_data <- read.csv(path_to_population_data,sep = ",")
population_data$Population[is.na(population_data$Population)] <- 0
#prepare for inner_join with @data_from_github
colnames(population_data)[8]<-"Country"
colnames(population_data)[7]<- "Province"
population_data$Country <- as.character(population_data$Country)
population_data$Province <- as.character(population_data$Province)
population_data$Population <- as.numeric(population_data$Population)
#adding logarithmic scaling to the dataframe for better color grading on the leaflet map of the shiny app. every logarithmic scaling with -inf as value was replaced with an -1. Also format digits after comma.
data_from_github <- mutate(data_from_github,logarithmic = log(Confirmed))
data_from_github$logarithmic[is.infinite(data_from_github$logarithmic)]<- -1
data_from_github$logarithmic <- format(round(data_from_github$logarithmic, 2), nsmall=2)
data_from_github$logarithmic <- as.numeric(data_from_github$logarithmic)
#inner join with @data_from_github and @population data frame
data_from_github <- left_join(data_from_github,population_data, by=c("Country","Province"))
colnames(data_from_github)[15]<-"Long"
#adding prevelance analysis. specific: Infected per 100k people. Also format digits after comma
data_from_github <- mutate(data_from_github,prevelance_100k = (Confirmed/Population)*100000)
data_from_github$prevelance_100k <- format(round(data_from_github$prevelance_100k, 2),nsmall = 2)
data_from_github$prevelance_100k <- as.numeric(data_from_github$prevelance_100k)
#adding All-cause mortality. Also format digits after comma.
data_from_github <- mutate(data_from_github,all_case_mortality_100k = (Deaths/Population)*100000)
data_from_github$all_case_mortality_100k <- format(round(data_from_github$all_case_mortality_100k, 2),nsmall = 2)
data_from_github$all_case_mortality_100k <- as.numeric(data_from_github$all_case_mortality_100k)
#adding cause-fatality-ratio. Also format digits after comma.
data_from_github <- mutate(data_from_github,case_fatality_rate = (Deaths/Confirmed)*100)
data_from_github$case_fatality_rate[is.nan(data_from_github$case_fatality_rate)]<- 0
data_from_github$case_fatality_rate <- format(round(data_from_github$case_fatality_rate, 2),nsmall = 2)
data_from_github$case_fatality_rate <- as.numeric(data_from_github$case_fatality_rate)
data_from_github$Population <- format(data_from_github$Population,big.mark = ".",decimal.mark = ",")
#Handling NA´s and Infites caused by missing population data
data_from_github$prevelance_100k[is.na(data_from_github$prevelance_100k)]<- 0
data_from_github$prevelance_100k[is.infinite(data_from_github$prevelance_100k)]<- 0
data_from_github$all_case_mortality_100k[is.na(data_from_github$all_case_mortality_100k)]<- 0
data_from_github$all_case_mortality_100k[is.infinite(data_from_github$all_case_mortality_100k)]<- 0
data_from_github$case_fatality_rate[is.na(data_from_github$case_fatality_rate)]<- 0
data_from_github$case_fatality_rate[is.infinite(data_from_github$case_fatality_rate)]<- 0
data_from_github$Lat[is.na(data_from_github$Lat)]<- 0
data_from_github$Long[is.na(data_from_github$Long)]<- 0
Splitted_Global_DF <- split(data_from_github, data_from_github$Country)
# playground for Time Series
Germany <- Splitted_Global_DF[["Germany"]]
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
stocks <- xts(Germany$Confirmed,order.by = as.Date(Germany$Date,"%Y-%m-%d"))
myts <- as.ts(stocks)
plot(myts)
fit <- HoltWinters(myts)
forecast_length <- 12
forecasting <- forecast(fit,h = forecast_length)
plotty <- as.data.frame(forecasting)
ggseasonplot(myts)
p <- plot_ly()%>%
add_lines(y = forecasting$mean, x= myts$Date, color = I("blue"), name = "prediction")%>%
add_ribbons(x = forecasting$x,
ymin = forecasting$lower[,2],
ymax = forecasting$upper[,2],
color = I("gray95"),
name = "95% confidence")%>%
add_ribbons(x = forecasting$x,
ymin = forecasting$lower[,1],
ymax = forecasting$upper[,1],
color = I("gray80"),
name = "80% confidence")
p
View(p)
P
p
View(stocks)
remove(stocks)
remove(p)
remove(plotty)
remove(enddate)
remove(forecasting.dates)
remove(fit)
remove(forecasting)
View(Germany)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
stocks <- xts(Germany$Confirmed,order.by = as.Date(Germany$Date,"%Y-%m-%d"))
View(stocks)
stocks.weekly <- apply.weekly(stocks, mean)
View(stocks.weekly)
View(stocks.weekly)
remove(stocks.weekly)
library(TTR)
library(lubridate)
stocks.end <- floor(0.8*length(stocks))
stocks.train <- stocks[1:stocks.end,]
stocks.test <- stocks[(stocks.end + 1):length(stocks),]
#Preperation for conversion from an xts to an ts object
stocks.start <- c(year(start(stocks.train)),month(start(stocks.train)),day(start(stocks.train)))
stocks.end <- c(year(end(stocks.train)),month(end(stocks.train)), day(end(stocks.train)))
stocks.train <- ts(as.numeric(stocks.train), start = stocks.start, end = stocks.end, frequency = 365)
stocks.start <- c(year(start(stocks.test)),month(start(stocks.test)),day(start(stocks.test)))
stocks.end <- c(year(end(stocks.test)),month(end(stocks.test)), day(end(stocks.test)))
stocks.test <- ts(as.numeric(stocks.test), start = stocks.start, end = stocks.end, frequency = 365)
view(stocks.train)
view(stocks.test)
stocks.daily <- apply.daily(stocks, mean)
View(stocks.daily)
stocks.end <- floor(0.8*length(stocks.daily))
stocks.train <- stocks.daily[1:stocks.end,]
View(stocks.train)
stocks.test <- stocks.daily[(stocks.end + 1):length(stocks.daily),]
View(stocks.train)
View(stocks.test)
#Preperation for conversion from an xts to an ts object
stocks.start <- c(year(start(stocks.train)),month(start(stocks.train)),day(start(stocks.train)))
stocks.end <- c(year(end(stocks.train)),month(end(stocks.train)), day(end(stocks.train)))
stocks.train <- ts(as.numeric(stocks.train), start = stocks.start, end = stocks.end, frequency = 365)
view(stocks.train)
stocks.train <- ts(as.numeric(stocks.train), start = stocks.start, end = stocks.end, frequency = 365.25)
stocks.train <- ts(as.numeric(stocks.train), start = stocks.start, end = stocks.end, frequency = 7)
#Preperation for conversion from an xts to an ts object
stocks.start <- c(year(start(stocks.train)),month(start(stocks.train)),day(start(stocks.train)))
stocks.end <- c(year(end(stocks.train)),month(end(stocks.train)), day(end(stocks.train)))
stocks.train <- ts(as.numeric(stocks.train), start = stocks.start, end = stocks.end, frequency = 7)
stocks.start <- c(year(start(stocks.test)),month(start(stocks.test)),day(start(stocks.test)))
stocks.end <- c(year(end(stocks.test)),month(end(stocks.test)), day(end(stocks.test)))
stocks.test <- ts(as.numeric(stocks.test), start = stocks.start, end = stocks.end, frequency = 7)
remove(z)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
stocks <- xts(Germany$Confirmed,order.by = as.Date(Germany$Date,"%Y-%m-%d"))
stocks.daily <- apply.daily(stocks, mean)
stocks.end <- floor(0.8*length(stocks.daily))
stocks.train <- stocks.daily[1:stocks.end,]
stocks.test <- stocks.daily[(stocks.end + 1):length(stocks.daily),]
#Preperation for conversion from an xts to an ts object
stocks.start <- c(year(start(stocks.train)),month(start(stocks.train)),day(start(stocks.train)))
view(stocks.start)
stocks.end <- c(year(end(stocks.train)),month(end(stocks.train)), day(end(stocks.train)))
stocks.train <- ts(as.numeric(stocks.train), start = stocks.start, end = stocks.end, frequency = 7)
view(stocks.train)
View(stocks.test)
stocks.start <- c(year(start(stocks.test)),month(start(stocks.test)),day(start(stocks.test)))
stocks.end <- c(year(end(stocks.test)),month(end(stocks.test)), day(end(stocks.test)))
stocks.test <- ts(as.numeric(stocks.test), start = stocks.start, end = stocks.end, frequency = 7)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
stocks <- xts(Germany$Confirmed,order.by = as.Date(Germany$Date,"%Y-%m-%d"))
stocks.daily <- apply.daily(stocks, mean)
stocks.end <- floor(0.8*length(stocks.daily))
stocks.train <- stocks.daily[1:stocks.end,]
stocks.test <- stocks.daily[(stocks.end + 1):length(stocks.daily),]
View(stocks.test)
stocks.daily <- apply.daily(stocks, mean)
stocks.end <- floor(0.8*length(stocks.daily))
stocks.train <- stocks.daily[1:stocks.end,]
stocks.test <- stocks.daily[(stocks.end + 1):length(stocks.daily),]
#Preperation for conversion from an xts to an ts object
stocks.start <- c(year(start(stocks.train)),month(start(stocks.train)),day(start(stocks.train)))
stocks.end <- c(year(end(stocks.train)),month(end(stocks.train)), day(end(stocks.train)))
View(stocks.train)
stocks.train <- ts(as.numeric(stocks.train), start = stocks.start, end = stocks.end, frequency = 52)
data_from_github$all_case_mortality_100k <- format(round(data_from_github$all_case_mortality_100k, 2),nsmall = 2)
stocks.daily <- apply.daily(stocks, mean)
stocks.end <- floor(0.8*length(stocks.daily))
stocks.train <- stocks.daily[1:stocks.end,]
stocks.test <- stocks.daily[(stocks.end + 1):length(stocks.daily),]
#Preperation for conversion from an xts to an ts object
stocks.start <- c(year(start(stocks.train)),month(start(stocks.train)),day(start(stocks.train)))
stocks.end <- c(year(end(stocks.train)),month(end(stocks.train)), day(end(stocks.train)))
stocks.train <- ts(as.numeric(stocks.train), frequency = 52)
stocks.start <- c(year(start(stocks.test)),month(start(stocks.test)),day(start(stocks.test)))
stocks.end <- c(year(end(stocks.test)),month(end(stocks.test)), day(end(stocks.test)))
stocks.test <- ts(as.numeric(stocks.test), frequency = 52)
stocks.daily <- apply.daily(stocks, mean)
stocks.end <- floor(0.8*length(stocks.daily))
stocks.train <- stocks.daily[1:stocks.end,]
stocks.test <- stocks.daily[(stocks.end + 1):length(stocks.daily),]
#Preperation for conversion from an xts to an ts object
stocks.start <- c(year(start(stocks.train)),month(start(stocks.train)),day(start(stocks.train)))
stocks.end <- c(year(end(stocks.train)),month(end(stocks.train)), day(end(stocks.train)))
stocks.train <- ts(as.numeric(stocks.train))
stocks.start <- c(year(start(stocks.test)),month(start(stocks.test)),day(start(stocks.test)))
stocks.end <- c(year(end(stocks.test)),month(end(stocks.test)), day(end(stocks.test)))
stocks.test <- ts(as.numeric(stocks.test))
stocks.daily <- apply.daily(stocks, mean)
stocks.end <- floor(0.8*length(stocks.daily))
stocks.train <- stocks.daily[1:stocks.end,]
stocks.test <- stocks.daily[(stocks.end + 1):length(stocks.daily),]
#Preperation for conversion from an xts to an ts object
stocks.start <- c(year(start(stocks.train)),month(start(stocks.train)),day(start(stocks.train)))
stocks.end <- c(year(end(stocks.train)),month(end(stocks.train)), day(end(stocks.train)))
stocks.train <- ts(as.numeric(stocks.train), start = stocks.start, end = stocks.end)
stocks.start <- c(year(start(stocks.test)),month(start(stocks.test)),day(start(stocks.test)))
stocks.end <- c(year(end(stocks.test)),month(end(stocks.test)), day(end(stocks.test)))
stocks.test <- ts(as.numeric(stocks.test), start = stocks.start, end = stocks.end)
view(stocks.end)
stocks.daily <- apply.daily(stocks, mean)
stocks.end <- floor(0.8*length(stocks.daily))
stocks.train <- stocks.daily[1:stocks.end,]
stocks.test <- stocks.daily[(stocks.end + 1):length(stocks.daily),]
#Preperation for conversion from an xts to an ts object
stocks.start <- paste(year(start(stocks.train)),month(start(stocks.train)),day(start(stocks.train)), sep="-")
stocks.end <- paste(year(end(stocks.train)),month(end(stocks.train)), day(end(stocks.train)), sep="")
stocks.train <- ts(as.numeric(stocks.train), start = stocks.start, end = stocks.end)
stocks.daily <- apply.daily(stocks, mean)
stocks.end <- floor(0.8*length(stocks.daily))
stocks.train <- stocks.daily[1:stocks.end,]
stocks.test <- stocks.daily[(stocks.end + 1):length(stocks.daily),]
#Preperation for conversion from an xts to an ts object
stocks.start <- paste(year(start(stocks.train)),month(start(stocks.train)),day(start(stocks.train)), sep="-")
stocks.start <- as.Date(stocks.start)
stocks.end <- paste(year(end(stocks.train)),month(end(stocks.train)), day(end(stocks.train)), sep="-")
stocks.end <- as.Date(stocks.end)
stocks.train <- ts(as.numeric(stocks.train), start = stocks.start, end = stocks.end)
stocks.daily <- apply.daily(stocks, mean)
stocks.end <- floor(0.8*length(stocks.daily))
stocks.train <- stocks.daily[1:stocks.end,]
stocks.test <- stocks.daily[(stocks.end + 1):length(stocks.daily),]
#Preperation for conversion from an xts to an ts object
stocks.start <- paste(year(start(stocks.train)),month(start(stocks.train)),day(start(stocks.train)), sep="-")
#stocks.start <- as.Date(stocks.start)
stocks.end <- paste(year(end(stocks.train)),month(end(stocks.train)), day(end(stocks.train)), sep="-")
#stocks.end <- as.Date(stocks.end)
stocks.train <- ts(as.numeric(stocks.train), start = stocks.start, end = stocks.end)
stocks.start <- c(year(start(stocks.test)),month(start(stocks.test)),day(start(stocks.test)))
stocks.end <- c(year(end(stocks.test)),month(end(stocks.test)), day(end(stocks.test)))
stocks.start[,1]
stocks.start[1]
stocks.start[1,]
stocks.start[0,1]
stocks.start[,]
stocks.start[]
stocks.test <- ts(as.numeric(stocks.test), start = stocks.start[], end = stocks.end[])
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
stocks <- xts(Germany$Confirmed,order.by = as.Date(Germany$Date,"%Y-%m-%d"))
stocks.end <- floor(0.8*length(stocks))
stocks.train <- stocks[1:stocks.end,]
stocks.test <- stocks[(stocks.end + 1):length(stocks),]
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
stocks <- xts(Germany$Confirmed,order.by = as.Date(Germany$Date,"%Y-%m-%d"))
stocks.end <- floor(0.8*length(stocks))
stocks.train <- stocks[1:stocks.end,]
stocks.test <- stocks[(stocks.end + 1):length(stocks),]
model <- auto.arima(stocks.train)
forecast <- forecast(model)
plot(stocks.test, main = 'Forest Comparison')
lines(forecast$mean, col = "blue")
plot(stocks.test, main = 'Forest Comparison')
lines(forecast$mean, col = "blue")
stocks.end <- floor(0.8*length(stocks))
stocks.train <- stocks[1:stocks.end,]
stocks.test <- stocks[(stocks.end + 1):length(stocks),]
stocks.train <- ts(as.numeric(stocks.train), start = c(year(start(stocks.train)),month(start(stocks.train)), day(start(stocks.train))), end = c(year(end(stocks.train)),month(end(stocks.train)),day(end(stocks.train))),frequency = 365.25)
stocks.test <- ts(as.numeric(stocks.test), start = c(year(start(stocks.test)),month(start(stocks.test)), day(start(stocks.test))), end = c(year(end(stocks.test)),month(end(stocks.test)),day(end(stocks.test))),frequency = 365.25)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
stocks <- xts(Germany$Confirmed,order.by = as.Date(Germany$Date,"%Y-%m-%d"))
View(stocks)
# playground for Time Series
Germany <- Splitted_Global_DF[["Germany"]]
Germany <- Germany %>% arrange(Date)
View(Germany)
Germany <- Germany %>% arrange(Date)
# playground for Time Series
Germany <- Splitted_Global_DF[["Germany"]]
Germany <- Germany %>% arrange(Date)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Date,start = c(year(start(Germany$Date)),month(start(Germany$Date)), day(start(Germany$Date))), end = c(year(end(Germany$Date)), month(end(Germany$Date)),day(end(Germany$Date))))
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed,start = c(year(start(Germany$Date)),month(start(Germany$Date)), day(start(Germany$Date))), end = c(year(end(Germany$Date)), month(end(Germany$Date)),day(end(Germany$Date))))
remove(myts)
remove(forecast_length)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
startdate <- Germany$Date[1]
enddate <- Germany$Date[-1]
enddate <- Germany$Date[length(Germany$Date)]
Germany_TS <- ts(Germany$Confirmed,start = Germany$Date[1], end = Germany$Date[length(Germany$Date)])
Germany_TS <- ts(Germany$Confirmed,start = as.Date(Germany$Date[1]), end = as.Date(Germany$Date[length(Germany$Date)]))
day(Germany$Date[1])
autoplot(Germany_TS)
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_forecast()
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_forecast(data = Germany_TS)
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_forecast()
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_forecast(show.legend = TRUE)
p
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_line()
geom_forecast(show.legend = TRUE)
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_line()
geom_forecast(show.legend = TRUE)
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_line()
geom_forecast()
p
geom_forecast(showgap = TRUE)
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_line()
geom_forecast(showgap = TRUE)
p
# playground for Time Series
Germany <- Splitted_Global_DF[["Germany"]]
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
autoplot(Germany$Confirmed)+geom_forecast()
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
autoplot(Germany)+geom_forecast()
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_line()
geom_forecast(showgap = TRUE)
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_forecast(showgap = TRUE)+
geom_line()
p
strftime()
?strftime()
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_forecast(showgap = TRUE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "2 weeks")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_forecast(showgap = TRUE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "2 days")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
geom_forecast(showgap = TRUE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90))
geom_forecast(showgap = TRUE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90))+
geom_forecast(showgap = TRUE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90))+
geom_forecast(showgap = TRUE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
fig <- ggplotly(p)
fig
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90))+
geom_forecast(showgap = TRUE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "right")+
geom_forecast(showgap = TRUE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "right")+
geom_forecast(showgap = TRUE, show.legend = TRUE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "right")+
geom_forecast(show.legend = TRUE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "right")+
geom_forecast(show.legend = TRUE, showgap = FALSE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed, fill = Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "right")+
geom_forecast(show.legend = TRUE, showgap = FALSE)+
geom_line()+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed, fill = Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "right")+
geom_forecast(show.legend = TRUE, showgap = FALSE)+
geom_line(show.legend = TRUE)
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "right")+
geom_forecast(show.legend = TRUE, showgap = FALSE)+
geom_line(show.legend = TRUE)
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "right")+
geom_forecast(show.legend = TRUE, showgap = FALSE)+
geom_line(show.legend = TRUE)+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
p <- ggplot(data = Germany,aes(x= Date, y=Confirmed))+
theme(axis.text.x = element_text(angle = 90), legend.position = "top")+
geom_forecast(show.legend = TRUE, showgap = FALSE)+
geom_line(show.legend = TRUE)+
scale_x_date(date_labels = "%x", date_breaks = "1 week")
p
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 365.25)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 365)
Germany_STL <- stl(Germany_TS, s.window = "period")
plot(Germany_STL)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 7)
Germany_STL <- stl(Germany_TS, s.window = "period")
plot(Germany_STL)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 365.52)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = '365.25')
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 365.25)
Germany_STL <- stl(Germany_TS, s.window = "period")
plot(Germany_STL)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 365)
Germany_STL <- stl(Germany_TS, s.window = "period")
plot(Germany_STL)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 12)
Germany_STL <- stl(Germany_TS, s.window = "period")
plot(Germany_STL)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)])
Germany_STL <- stl(Germany_TS, s.window = "period")
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)])
Germany_STL <- stl(Germany_TS, s.window = "period")
plot(Germany_STL)
plot(Germany_TS)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 365)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- ts(Germany$Confirmed, start = Germany$Date[1], end = Germany$Date[length(Germany$Date)], frequency = 1)
Germany_STL <- stl(Germany_TS, s.window = "period")
?ts()
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- as.ts(Germany)
View(Germany_TS)
?as_ts()
?as.ts()
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_TS <- xts(Germany$Confirmed,Germany$Date)
View(Germany_TS)
plot(Germany_TS)
# fit a model for Time Series references:(https://www.statmethods.net/advstats/timeseries.html)
Germany_XTS <- xts(Germany$Confirmed,Germany$Date)
Germany_TS <- ts(Germany_XTS, frequency = 365, start = c(year(start(Germany_XTS)),month(start(Germany_XTS)),day(start(Germany_XTS))), end = c(year(end(Germany_XTS)),month(end(Germany_XTS)),day(end(Germany_XTS))))
View(Germany_XTS)
Germany_TS <- ts(Germany_XTS, frequency = 365, start = c(year(start(Germany_XTS)),month(start(Germany_XTS)),day(start(Germany_XTS))))
view(Germany_TS)
plot(Germany_TS)
plot(forecast(ets(Germany_TS),10))
plot(forecast(ets(Germany_TS),10), xaxt = "n")
plot(forecast(ets(Germany_TS),10), xaxt = "n")
a = seq(Germany$Date[1],by = "days", length= length(Germany$Date))
axis(1, at =decimal_date(a), labels = format(a, "%Y %b %d"))
axis(0, at =decimal_date(a), labels = format(a, "%Y %b %d"))
axis(2, at =decimal_date(a), labels = format(a, "%Y %b %d"))
axis(1, at =decimal_date(a), labels = format(a, "%Y %b %d"))
p<- ggplot(data = Germany_TS, aes(x= Date, y=Confirmed))+
geom_line()
p
Germany_TS
view(Germany_TS)
p<- ggplot(data = Germany_TS)+
geom_line()
p
p<- ggplot(data = Germany_TS, aes(x=x,y=y))+
geom_line()
p
p<- ggplot(data = Germany_TS, aes(x=Series1,y=Series1))+
geom_line()
p
head(Germany_TS)
